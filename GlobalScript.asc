// main global script file

function initialize_control_panel() { // A function that initializes a bunch of stuff
  // Centre the UI panels
  gPanel.Centre(); 
  gRestartYN.Centre();
  gExitGame.Centre();
  gSaveGame.Centre();
  gRestoreGame.Centre();

  if (!IsSpeechVoxAvailable()) { 
    // If there is no speech-vox file, and therefore no speech,
    // disable all the controls related with speech.
  }
  else {
    // If there *is*, then set it to voice and text. It's best to use
    // both whenever possible, for the player's sake.
  }
  if (!System.SupportsGammaControl) {
    // If we can't change the gamma settings, disable the relevant options.
  }
  
  //Set all the defaults
  //player.SetWalkSpeed(5, 5);  //Refers to how many pixels each step moves a character
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  SetGameSpeed(100);
  
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     //btnVoice.Text = "Voice and Text";
    // sldVoice.Value = 255;
     //SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    //System.Gamma = 100;
    //sldGamma.Value = 100;
  }
}

function game_start() { // Called when the game starts, before the first room is loaded
  // Put the code all in a function and then just call the function. 
  // It saves cluttering up places like game_start
  aDrumoffice.Play();
  initialize_control_panel(); 
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  KeyboardMovement.SetMode(eKeyboardMovement_Tapping); 
}

function repeatedly_execute() {
  // Put here anything you want to happen every game cycle, even when
  // the game is paused. This will not run when the game is blocked
  // inside a command like a blocking Walk()
  if (IsGamePaused() == 1) return;
  // Put here anything you want to happen every game cycle, but not
  // when the game is paused.
}

function repeatedly_execute_always() {
  // Put anything you want to happen every game cycle, even
  // when the game is blocked inside a command like a
  // blocking Walk().
  // You cannot run blocking commands from this function.
}

function show_inventory_window () { // Show inventory
  gIconbar.Visible = false; // hide icon bar
  gInventory.Visible = true; // make inventory GUI visible
  mouse.Mode = eModeInteract; // switch to the Use cursor (to select items with)
  mouse.UseModeGraphic(eModePointer); // override Use cursor appearance to look like an arrow
}

function show_save_game_dialog() { // Save game
  gSaveGame.Visible = true; // make save GUI visible
  lstSaveGamesList.FillSaveGameList(); // Get the list of saved games
  if (lstSaveGamesList.ItemCount > 0) // If there is at least one
  {
    txtNewSaveName.Text = lstSaveGamesList.Items[0]; // set default text to first game's name
  }
  else
  {
    txtNewSaveName.Text = ""; // No save games yet, default empty text
  }
  mouse.UseModeGraphic(eModePointer); // set mouse to look like pointer
  gIconbar.Visible = false; // hide icon bar
}

function show_restore_game_dialog() { // Load previous game

  gRestoreGame.Visible = true; // Show load GUI
  lstRestoreGamesList.FillSaveGameList(); // Get list of saved games
  mouse.UseModeGraphic(eModePointer); // set mouse to look like pointer
  gIconbar.Visible = false; // hide icon bar
}

function close_save_game_dialog() { // Close save GUI
  gSaveGame.Visible = false; // hide save GUI
  mouse.UseDefaultGraphic(); // change mouse to default
  gIconbar.Visible = true; // show icon bar
}

function close_restore_game_dialog() { // Close load GUI
  gRestoreGame.Visible = false; // hide load GUI
  mouse.UseDefaultGraphic(); // change mouse to default
  gIconbar.Visible = true; // show icon bar
}

function show_exit_dialog() { // Exit game
  gExitGame.Visible = true; // Show exit GUI
  gIconbar.Visible = false; // Hide icon bar
  mouse.UseModeGraphic(eModePointer); // set mouse to look like pointer
}

function on_key_press(eKeyCode keycode) { // Called when a key is pressed, keycode holds the key's ASCII code
  // The following is called before "if game is paused keycode=0", so it'll happen even when the game is paused.
  if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    gIconbar.Visible = true;
    // If the panel's not ON, then the player must have gotten here by tapping F9,
    // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
    // because it's already a pointer. Get used to thinking like this!!
    if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
    return;
  }
  if ((keycode == eKeyEscape) && gPanel.Visible) {
    // Use ESC to turn the panel off.
    gPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    gIconbar.Visible = true;
    return;
  }
  if ((keycode == eKeyEscape) && (gSaveGame.Visible)) {
    close_save_game_dialog(); // Use ESC to close the save game dialog
    return;
  }
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible)) {
    close_restore_game_dialog(); // Use ESC to close load screen
    return;
  }
  
  if (keycode == eKeyReturn) {
    if (gRestartYN.Visible) RestartGame(); // ENTER confirms restart
  }

  if (IsGamePaused() || (IsInterfaceEnabled() == 0)) {
    return; // If the game is paused with a GUI on screen or cut scene is playing, ignore keypresses
  }

  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) { // ESC
    gPanel.Visible = true; 
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyCtrlQ) show_exit_dialog();   // Ctrl-Q
  if (keycode == eKeyF5) show_save_game_dialog();   // F5
  if (keycode == eKeyF7) show_restore_game_dialog();  // F7
  if (keycode == eKeyF9) { // F9, asks the player to confirm restarting
    gRestartYN.Visible = true;  
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12
  if (keycode == eKeyTab)   show_inventory_window();  // Tab, show inventory

  // GAME COMMAND SHORTCUTS (alternate way to indicate keycodes)
  if (keycode == 'W') mouse.Mode=eModeWalkto;
  if (keycode == 'L') mouse.Mode=eModeLookat;
  if (keycode == 'U') mouse.Mode=eModeInteract;
  if (keycode == 'T') mouse.Mode=eModeTalkto; //possibly delete and just use interact
  if (keycode == 'I') mouse.Mode=eModeUseinv;
  if (keycode == 'P') mouse.Mode=eModePickup; //possibly delete and just use interact

  // DEBUG FUNCTIONS
  if (keycode == eKeyCtrlS)  Debug(0,0);  // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV)  Debug(1,0);  // Ctrl-V, version
  if (keycode == eKeyCtrlA)  Debug(2,0);  // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX)  Debug(3,0);  // Ctrl-X, teleport to room
  if (keycode == eKeyCtrlW && game.debug_mode) 
    player.PlaceOnWalkableArea(); //Ctrl-W, move to walkable area 
}

function on_mouse_click(MouseButton button) { // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeft) {
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click our mouse-wheel down, so cycle cursor
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle) { 
    // Middle-button-click, default make character walk to clicked area (a little shortcut)
    // Could have been just "player.Walk(mouse.x,mouse.y)", but it's best to
    // leave our options open - what if you have a special script triggered
    // on "walking" mode?
    Room.ProcessClick(mouse.x, mouse.y, eModeWalkto); 
  }
  else if (button == eMouseWheelNorth) { 
    // Mouse-wheel up, cycle cursors 
    // If mode isn't WALK, set the previous mode (notice usage of numbers instead
    // of eNums, when it suits us)...
    if (mouse.Mode>0) mouse.Mode=mouse.Mode-1; 
    else 
    { 
      // ...but if it is WALK mode...
      if (player.ActiveInventory!=null) 
      {
        //...and the player has a selected inventory item, set mouse mode to UseInv. 
        mouse.Mode=eModeUseinv; 
      }
      else 
      {
        // If they don't, however, just set it to mode TALK (change this line if you add more cursor modes)
        mouse.Mode=eModeTalkto; 
      }
    }
  }
}

function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}

function btnInvUp_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollDown();
}

function btnInvOK_Click(GUIControl *control, MouseButton button) {
	// They pressed the OK button, close the GUI
	gInventory.Visible = false;
  gIconbar.Visible = true;
	mouse.UseDefaultGraphic();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button) {
  
	// They pressed SELECT, so switch to the Get cursor
	mouse.Mode = eModeInteract;
	// But, override the appearance to look like the arrow
	mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button) {
  
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button) {
  
  if (player.ActiveInventory != null)
    mouse.Mode = eModeUseinv;
}

function btnIconSave_Click(GUIControl *control, MouseButton button) 
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button) 
{
  show_restore_game_dialog();
}

function btnIconExit_Click(GUIControl *control, MouseButton button) {
  show_exit_dialog();
}

function btnIconAbout_Click(GUIControl *control, MouseButton button) {
  
  gPanel.Visible=true;
  gIconbar.Visible=false;
  mouse.UseModeGraphic(eModePointer);
}

function cPlayer_Look()
{
  Display("Damn, I'm looking good!");
}

function cPlayer_Interact()
{
  Display("You rub your hands up and down your clothes.");
}

//START OF CONTROL PANEL FUNCTIONS
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function gControl_OnClick(GUI *theGui, MouseButton button)
{

}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
Display("Adventure Game Studio run-time engine default game.");
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  show_exit_dialog();
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  // Sets voice volume. Note that we don't check for the existence of speech.vox - 
  // we did that in game_start, so if it's not there the slider won't even be available.
  //SetSpeechVolume(sldVoice.Value); 
}
/*
function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  // Note that we don't check for the existence of speech.vox - we did that in game_start,
  // so if it's not there the button won't even be available.
  if (btnVoice.Text == "Voice and Text") { 
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only") {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only") {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}
*/
/*
function sldGamma_OnChange(GUIControl *control)
{
  // Set the gamma. Note there's no need to check for anything else, as we ensured,
  // in game_start, that the slider won't even appear if it's not possible to do this.
  System.Gamma = sldGamma.Value; 
}
*/
/*
function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  // Reset everything to default. You'll have to edit these as well as the sliders
  // if you'd rather have different default parameters.
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  //sldSpeed.Value = 40;
  SetGameSpeed(40);
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     //btnVoice.Text = "Voice and Text";
     //sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    System.Gamma = 100;
    //sldGamma.Value = 100;
  }
}
*/

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom(1);
}

//END OF CONTROL PANEL FUNCTIONS

function dialog_request(int param) 
{
  // This is used by the dialog text parser if you need to process
  // text that the player types in to the parser.
  // It is not used by default.
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  gRestartYN.Visible = true;
  gIconbar.Visible = false;
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
  gIconbar.Visible = true;
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }
    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i++;
  }
 
  // Find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!slots[i])
      return i;
    i++;
  }
  // no free slots found
  return -1;
}
 
function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);
  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
    return;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function bQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function bPlay_OnClick(GUIControl *control, MouseButton button)
{
  gExitGame.Visible = false;
  gIconbar.Visible = true;
  mouse.UseDefaultGraphic();
}

function iStapler_UseInv()
{
  if (player.ActiveInventory == iJello) {
    player.LoseInventory(iJello);
    player.LoseInventory(iStapler);
    player.AddInventory(iJelloStapler);
    Display("Cool! Jello Stapler!");
  }
  else {
    player.Say("I don't want to do that.");
  }
}

function iJello_UseInv()
{
  if (player.ActiveInventory == iStapler) {
    player.LoseInventory(iStapler);
    player.LoseInventory(iJello);
    player.AddInventory(iJelloStapler);
    Display("Cool! Jello Stapler!");
  }
  else {
    player.Say("I don't want to do that.");
  }
}

function gRestartYN_OnClick(GUI *theGui, MouseButton button)
{

}

function cDwightSit_Look() {
  player.Say("That's Dwight. I want to prank him!");
  player.Say("For my prank, I need 5 pencils.");
  player.Say("I wonder if Dwight has any pencils.");
}

function cDwightSit_Interact() {
  if (player.HasInventory(iPencil1) && player.HasInventory(iPencil2) && player.HasInventory(iPencil3) && player.HasInventory(iPencil4)) {
    cDwightSit.Say("I need to go on a sales call.");
    cDwight.ChangeRoom(player.Room, 257, 421, eDirectionUp);
    cDwightSit.Transparency = 100;
    cDwight.SetWalkSpeed(5, 5);
    cDwight.Walk(800, cDwight.y, eBlock, eAnywhere);
    cDwight.Transparency = 100;
    dwight_leave = true;
  }
  else {
    player.Say("Hey Dwight. Got any pencils I could borrow?");
    cDwightSit.Say("Ugh, get your own pencils JIM.");
  }
}

function cMichaelSit_Look() {
  player.Say("That's Michael. I wonder if he has any pencils...");
}

function cMichaelSit_Interact() {
  if (talk_to_michael == true) {
    cMichaelSit.Say("What's up, Slim Jim?");
    player.Say("Nevermind.");
  }
  else {
    player.Say("Hey Michael! Do you have any pencils I could borrow?");
    cMichaelSit.Say("Jimbo!! Coming to the boss man for pencils!!");
    player.Say("I... guess?");
    cMichaelSit.Say("Well, here you go, one pencil for you!");
    player.AddInventory(iPencil1);
    pencil_count++;
    player.Say("Thanks Michael!");
    player.Say("Do you mind if I look around your office for some more?");
    cMichaelSit.Say("Sure, go ahead!");
    talk_to_michael = true;
  }
}

function cToby_Look() {
  player.Say("There's Toby! I wonder if he has any pencils.");
}

function cToby_Interact() {
  if (player.HasInventory(iPencil3)) {
    cToby.Say("Hey! You found my pencil! Nice job!");
  }
  else {
    player.Say("Hey Toby. Do you have any pencils I could borrow?");
    cToby.Say("Sure Jim! I think I have one right here in my-");
    cToby.Say("Hey, wait a minute. Where did my pencil go?");
    cToby.Say("I had it before I grabbed my yogurt from the fridge...");
    talk_to_toby = true;
  }
}
